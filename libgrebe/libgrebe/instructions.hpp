#ifndef LIBGREBE_INSTRUCTIONS_HPP
#define LIBGREBE_INSTRUCTIONS_HPP

#include <libgrebe/state.hpp>
#include <exception>

struct UndefinedOpcodeException : public std::exception
{
	[[nodiscard]] const char* what() const noexcept override
	{
		return "Undefined opcode";
	}
};

class Instructions
{
public:
	static void Undefined(State& state);
	static void NOP(State& state);
	static void LD_BC_d16(State& state);
	static void LD_MEM_AT_BC_A(State& state);
	static void INC_BC(State& state);
	static void INC_B(State& state);
	static void DEC_B(State& state);
	static void LD_B_d8(State& state);
	static void RLCA(State& state);
	static void LD_MEM_AT_a16_SP(State& state);
	static void ADD_HL_BC(State& state);
	static void LD_A_MEM_AT_BC(State& state);
	static void DEC_BC(State& state);
	static void INC_C(State& state);
	static void DEC_C(State& state);
	static void LD_C_d8(State& state);
	static void RRCA(State& state);
	static void STOP_d8(State& state);
	static void LD_DE_d16(State& state);
	static void LD_MEM_AT_DE_A(State& state);
	static void INC_DE(State& state);
	static void INC_D(State& state);
	static void DEC_D(State& state);
	static void LD_D_d8(State& state);
	static void RLA(State& state);
	static void JR_r8(State& state);
	static void ADD_HL_DE(State& state);
	static void LD_A_MEM_AT_DE(State& state);
	static void DEC_DE(State& state);
	static void INC_E(State& state);
	static void DEC_E(State& state);
	static void LD_E_d8(State& state);
	static void RRA(State& state);
	static void JR_NZ_r8(State& state);
	static void LD_HL_d16(State& state);
	static void LDI_MEM_AT_HL_A(State& state);
	static void INC_HL(State& state);
	static void INC_H(State& state);
	static void DEC_H(State& state);
	static void LD_H_d8(State& state);
	static void DAA(State& state);
	static void JR_Z_r8(State& state);
	static void ADD_HL_HL(State& state);
	static void LDI_A_MEM_AT_HL(State& state);
	static void DEC_HL(State& state);
	static void INC_L(State& state);
	static void DEC_L(State& state);
	static void LD_L_d8(State& state);
	static void CPL(State& state);
	static void JR_NC_r8(State& state);
	static void LD_SP_d16(State& state);
	static void LDD_MEM_AT_HL_A(State& state);
	static void INC_SP(State& state);
	static void INC_MEM_AT_HL(State& state);
	static void DEC_MEM_AT_HL(State& state);
	static void LD_MEM_AT_HL_d8(State& state);
	static void SCF(State& state);
	static void JR_C_r8(State& state);
	static void ADD_HL_SP(State& state);
	static void LDD_A_MEM_AT_HL(State& state);
	static void DEC_SP(State& state);
	static void INC_A(State& state);
	static void DEC_A(State& state);
	static void LD_A_d8(State& state);
	static void CCF(State& state);
	static void LD_B_B(State& state);
	static void LD_B_C(State& state);
	static void LD_B_D(State& state);
	static void LD_B_E(State& state);
	static void LD_B_H(State& state);
	static void LD_B_L(State& state);
	static void LD_B_MEM_AT_HL(State& state);
	static void LD_B_A(State& state);
	static void LD_C_B(State& state);
	static void LD_C_C(State& state);
	static void LD_C_D(State& state);
	static void LD_C_E(State& state);
	static void LD_C_H(State& state);
	static void LD_C_L(State& state);
	static void LD_C_MEM_AT_HL(State& state);
	static void LD_C_A(State& state);
	static void LD_D_B(State& state);
	static void LD_D_C(State& state);
	static void LD_D_D(State& state);
	static void LD_D_E(State& state);
	static void LD_D_H(State& state);
	static void LD_D_L(State& state);
	static void LD_D_MEM_AT_HL(State& state);
	static void LD_D_A(State& state);
	static void LD_E_B(State& state);
	static void LD_E_C(State& state);
	static void LD_E_D(State& state);
	static void LD_E_E(State& state);
	static void LD_E_H(State& state);
	static void LD_E_L(State& state);
	static void LD_E_MEM_AT_HL(State& state);
	static void LD_E_A(State& state);
	static void LD_H_B(State& state);
	static void LD_H_C(State& state);
	static void LD_H_D(State& state);
	static void LD_H_E(State& state);
	static void LD_H_H(State& state);
	static void LD_H_L(State& state);
	static void LD_H_MEM_AT_HL(State& state);
	static void LD_H_A(State& state);
	static void LD_L_B(State& state);
	static void LD_L_C(State& state);
	static void LD_L_D(State& state);
	static void LD_L_E(State& state);
	static void LD_L_H(State& state);
	static void LD_L_L(State& state);
	static void LD_L_MEM_AT_HL(State& state);
	static void LD_L_A(State& state);
	static void LD_MEM_AT_HL_B(State& state);
	static void LD_MEM_AT_HL_C(State& state);
	static void LD_MEM_AT_HL_D(State& state);
	static void LD_MEM_AT_HL_E(State& state);
	static void LD_MEM_AT_HL_H(State& state);
	static void LD_MEM_AT_HL_L(State& state);
	static void HALT(State& state);
	static void LD_MEM_AT_HL_A(State& state);
	static void LD_A_B(State& state);
	static void LD_A_C(State& state);
	static void LD_A_D(State& state);
	static void LD_A_E(State& state);
	static void LD_A_H(State& state);
	static void LD_A_L(State& state);
	static void LD_A_MEM_AT_HL(State& state);
	static void LD_A_A(State& state);
	static void ADD_A_B(State& state);
	static void ADD_A_C(State& state);
	static void ADD_A_D(State& state);
	static void ADD_A_E(State& state);
	static void ADD_A_H(State& state);
	static void ADD_A_L(State& state);
	static void ADD_A_MEM_AT_HL(State& state);
	static void ADD_A_A(State& state);
	static void ADC_A_B(State& state);
	static void ADC_A_C(State& state);
	static void ADC_A_D(State& state);
	static void ADC_A_E(State& state);
	static void ADC_A_H(State& state);
	static void ADC_A_L(State& state);
	static void ADC_A_MEM_AT_HL(State& state);
	static void ADC_A_A(State& state);
	static void SUB_B(State& state);
	static void SUB_C(State& state);
	static void SUB_D(State& state);
	static void SUB_E(State& state);
	static void SUB_H(State& state);
	static void SUB_L(State& state);
	static void SUB_MEM_AT_HL(State& state);
	static void SUB_A(State& state);
	static void SBC_A_B(State& state);
	static void SBC_A_C(State& state);
	static void SBC_A_D(State& state);
	static void SBC_A_E(State& state);
	static void SBC_A_H(State& state);
	static void SBC_A_L(State& state);
	static void SBC_A_MEM_AT_HL(State& state);
	static void SBC_A_A(State& state);
	static void AND_B(State& state);
	static void AND_C(State& state);
	static void AND_D(State& state);
	static void AND_E(State& state);
	static void AND_H(State& state);
	static void AND_L(State& state);
	static void AND_MEM_AT_HL(State& state);
	static void AND_A(State& state);
	static void XOR_B(State& state);
	static void XOR_C(State& state);
	static void XOR_D(State& state);
	static void XOR_E(State& state);
	static void XOR_H(State& state);
	static void XOR_L(State& state);
	static void XOR_MEM_AT_HL(State& state);
	static void XOR_A(State& state);
	static void OR_B(State& state);
	static void OR_C(State& state);
	static void OR_D(State& state);
	static void OR_E(State& state);
	static void OR_H(State& state);
	static void OR_L(State& state);
	static void OR_MEM_AT_HL(State& state);
	static void OR_A(State& state);
	static void CP_B(State& state);
	static void CP_C(State& state);
	static void CP_D(State& state);
	static void CP_E(State& state);
	static void CP_H(State& state);
	static void CP_L(State& state);
	static void CP_MEM_AT_HL(State& state);
	static void CP_A(State& state);
	static void RET_NZ(State& state);
	static void POP_BC(State& state);
	static void JP_NZ_a16(State& state);
	static void JP_a16(State& state);
	static void CALL_NZ_a16(State& state);
	static void PUSH_BC(State& state);
	static void ADD_A_d8(State& state);
	static void RST_00H(State& state);
	static void RET_Z(State& state);
	static void RET(State& state);
	static void JP_Z_a16(State& state);
	static void PREFIX_CB(State& state);
	static void CALL_Z_a16(State& state);
	static void CALL_a16(State& state);
	static void ADC_A_d8(State& state);
	static void RST_08H(State& state);
	static void RET_NC(State& state);
	static void POP_DE(State& state);
	static void JP_NC_a16(State& state);
	static void CALL_NC_a16(State& state);
	static void PUSH_DE(State& state);
	static void SUB_d8(State& state);
	static void RST_10H(State& state);
	static void RET_C(State& state);
	static void RETI(State& state);
	static void JP_C_a16(State& state);
	static void CALL_C_a16(State& state);
	static void SBC_A_d8(State& state);
	static void RST_18H(State& state);
	static void LDH_MEM_AT_a8_A(State& state);
	static void POP_HL(State& state);
	static void LD_MEM_AT_C_A(State& state);
	static void PUSH_HL(State& state);
	static void AND_d8(State& state);
	static void RST_20H(State& state);
	static void ADD_SP_r8(State& state);
	static void JP_HL(State& state);
	static void LD_MEM_AT_a16_A(State& state);
	static void XOR_d8(State& state);
	static void RST_28H(State& state);
	static void LDH_A_MEM_AT_a8(State& state);
	static void POP_AF(State& state);
	static void LD_A_MEM_AT_C(State& state);
	static void DI(State& state);
	static void PUSH_AF(State& state);
	static void OR_d8(State& state);
	static void RST_30H(State& state);
	static void LD_HL_SP_r8(State& state);
	static void LD_SP_HL(State& state);
	static void LD_A_MEM_AT_a16(State& state);
	static void EI(State& state);
	static void CP_d8(State& state);
	static void RST_38H(State& state);
	static void RLC_B(State& state);
	static void RLC_C(State& state);
	static void RLC_D(State& state);
	static void RLC_E(State& state);
	static void RLC_H(State& state);
	static void RLC_L(State& state);
	static void RLC_MEM_AT_HL(State& state);
	static void RLC_A(State& state);
	static void RRC_B(State& state);
	static void RRC_C(State& state);
	static void RRC_D(State& state);
	static void RRC_E(State& state);
	static void RRC_H(State& state);
	static void RRC_L(State& state);
	static void RRC_MEM_AT_HL(State& state);
	static void RRC_A(State& state);
	static void RL_B(State& state);
	static void RL_C(State& state);
	static void RL_D(State& state);
	static void RL_E(State& state);
	static void RL_H(State& state);
	static void RL_L(State& state);
	static void RL_MEM_AT_HL(State& state);
	static void RL_A(State& state);
	static void RR_B(State& state);
	static void RR_C(State& state);
	static void RR_D(State& state);
	static void RR_E(State& state);
	static void RR_H(State& state);
	static void RR_L(State& state);
	static void RR_MEM_AT_HL(State& state);
	static void RR_A(State& state);
	static void SLA_B(State& state);
	static void SLA_C(State& state);
	static void SLA_D(State& state);
	static void SLA_E(State& state);
	static void SLA_H(State& state);
	static void SLA_L(State& state);
	static void SLA_MEM_AT_HL(State& state);
	static void SLA_A(State& state);
	static void SRA_B(State& state);
	static void SRA_C(State& state);
	static void SRA_D(State& state);
	static void SRA_E(State& state);
	static void SRA_H(State& state);
	static void SRA_L(State& state);
	static void SRA_MEM_AT_HL(State& state);
	static void SRA_A(State& state);
	static void SWAP_B(State& state);
	static void SWAP_C(State& state);
	static void SWAP_D(State& state);
	static void SWAP_E(State& state);
	static void SWAP_H(State& state);
	static void SWAP_L(State& state);
	static void SWAP_MEM_AT_HL(State& state);
	static void SWAP_A(State& state);
	static void SRL_B(State& state);
	static void SRL_C(State& state);
	static void SRL_D(State& state);
	static void SRL_E(State& state);
	static void SRL_H(State& state);
	static void SRL_L(State& state);
	static void SRL_MEM_AT_HL(State& state);
	static void SRL_A(State& state);
	static void BIT_0_B(State& state);
	static void BIT_0_C(State& state);
	static void BIT_0_D(State& state);
	static void BIT_0_E(State& state);
	static void BIT_0_H(State& state);
	static void BIT_0_L(State& state);
	static void BIT_0_MEM_AT_HL(State& state);
	static void BIT_0_A(State& state);
	static void BIT_1_B(State& state);
	static void BIT_1_C(State& state);
	static void BIT_1_D(State& state);
	static void BIT_1_E(State& state);
	static void BIT_1_H(State& state);
	static void BIT_1_L(State& state);
	static void BIT_1_MEM_AT_HL(State& state);
	static void BIT_1_A(State& state);
	static void BIT_2_B(State& state);
	static void BIT_2_C(State& state);
	static void BIT_2_D(State& state);
	static void BIT_2_E(State& state);
	static void BIT_2_H(State& state);
	static void BIT_2_L(State& state);
	static void BIT_2_MEM_AT_HL(State& state);
	static void BIT_2_A(State& state);
	static void BIT_3_B(State& state);
	static void BIT_3_C(State& state);
	static void BIT_3_D(State& state);
	static void BIT_3_E(State& state);
	static void BIT_3_H(State& state);
	static void BIT_3_L(State& state);
	static void BIT_3_MEM_AT_HL(State& state);
	static void BIT_3_A(State& state);
	static void BIT_4_B(State& state);
	static void BIT_4_C(State& state);
	static void BIT_4_D(State& state);
	static void BIT_4_E(State& state);
	static void BIT_4_H(State& state);
	static void BIT_4_L(State& state);
	static void BIT_4_MEM_AT_HL(State& state);
	static void BIT_4_A(State& state);
	static void BIT_5_B(State& state);
	static void BIT_5_C(State& state);
	static void BIT_5_D(State& state);
	static void BIT_5_E(State& state);
	static void BIT_5_H(State& state);
	static void BIT_5_L(State& state);
	static void BIT_5_MEM_AT_HL(State& state);
	static void BIT_5_A(State& state);
	static void BIT_6_B(State& state);
	static void BIT_6_C(State& state);
	static void BIT_6_D(State& state);
	static void BIT_6_E(State& state);
	static void BIT_6_H(State& state);
	static void BIT_6_L(State& state);
	static void BIT_6_MEM_AT_HL(State& state);
	static void BIT_6_A(State& state);
	static void BIT_7_B(State& state);
	static void BIT_7_C(State& state);
	static void BIT_7_D(State& state);
	static void BIT_7_E(State& state);
	static void BIT_7_H(State& state);
	static void BIT_7_L(State& state);
	static void BIT_7_MEM_AT_HL(State& state);
	static void BIT_7_A(State& state);
	static void RES_0_B(State& state);
	static void RES_0_C(State& state);
	static void RES_0_D(State& state);
	static void RES_0_E(State& state);
	static void RES_0_H(State& state);
	static void RES_0_L(State& state);
	static void RES_0_MEM_AT_HL(State& state);
	static void RES_0_A(State& state);
	static void RES_1_B(State& state);
	static void RES_1_C(State& state);
	static void RES_1_D(State& state);
	static void RES_1_E(State& state);
	static void RES_1_H(State& state);
	static void RES_1_L(State& state);
	static void RES_1_MEM_AT_HL(State& state);
	static void RES_1_A(State& state);
	static void RES_2_B(State& state);
	static void RES_2_C(State& state);
	static void RES_2_D(State& state);
	static void RES_2_E(State& state);
	static void RES_2_H(State& state);
	static void RES_2_L(State& state);
	static void RES_2_MEM_AT_HL(State& state);
	static void RES_2_A(State& state);
	static void RES_3_B(State& state);
	static void RES_3_C(State& state);
	static void RES_3_D(State& state);
	static void RES_3_E(State& state);
	static void RES_3_H(State& state);
	static void RES_3_L(State& state);
	static void RES_3_MEM_AT_HL(State& state);
	static void RES_3_A(State& state);
	static void RES_4_B(State& state);
	static void RES_4_C(State& state);
	static void RES_4_D(State& state);
	static void RES_4_E(State& state);
	static void RES_4_H(State& state);
	static void RES_4_L(State& state);
	static void RES_4_MEM_AT_HL(State& state);
	static void RES_4_A(State& state);
	static void RES_5_B(State& state);
	static void RES_5_C(State& state);
	static void RES_5_D(State& state);
	static void RES_5_E(State& state);
	static void RES_5_H(State& state);
	static void RES_5_L(State& state);
	static void RES_5_MEM_AT_HL(State& state);
	static void RES_5_A(State& state);
	static void RES_6_B(State& state);
	static void RES_6_C(State& state);
	static void RES_6_D(State& state);
	static void RES_6_E(State& state);
	static void RES_6_H(State& state);
	static void RES_6_L(State& state);
	static void RES_6_MEM_AT_HL(State& state);
	static void RES_6_A(State& state);
	static void RES_7_B(State& state);
	static void RES_7_C(State& state);
	static void RES_7_D(State& state);
	static void RES_7_E(State& state);
	static void RES_7_H(State& state);
	static void RES_7_L(State& state);
	static void RES_7_MEM_AT_HL(State& state);
	static void RES_7_A(State& state);
	static void SET_0_B(State& state);
	static void SET_0_C(State& state);
	static void SET_0_D(State& state);
	static void SET_0_E(State& state);
	static void SET_0_H(State& state);
	static void SET_0_L(State& state);
	static void SET_0_MEM_AT_HL(State& state);
	static void SET_0_A(State& state);
	static void SET_1_B(State& state);
	static void SET_1_C(State& state);
	static void SET_1_D(State& state);
	static void SET_1_E(State& state);
	static void SET_1_H(State& state);
	static void SET_1_L(State& state);
	static void SET_1_MEM_AT_HL(State& state);
	static void SET_1_A(State& state);
	static void SET_2_B(State& state);
	static void SET_2_C(State& state);
	static void SET_2_D(State& state);
	static void SET_2_E(State& state);
	static void SET_2_H(State& state);
	static void SET_2_L(State& state);
	static void SET_2_MEM_AT_HL(State& state);
	static void SET_2_A(State& state);
	static void SET_3_B(State& state);
	static void SET_3_C(State& state);
	static void SET_3_D(State& state);
	static void SET_3_E(State& state);
	static void SET_3_H(State& state);
	static void SET_3_L(State& state);
	static void SET_3_MEM_AT_HL(State& state);
	static void SET_3_A(State& state);
	static void SET_4_B(State& state);
	static void SET_4_C(State& state);
	static void SET_4_D(State& state);
	static void SET_4_E(State& state);
	static void SET_4_H(State& state);
	static void SET_4_L(State& state);
	static void SET_4_MEM_AT_HL(State& state);
	static void SET_4_A(State& state);
	static void SET_5_B(State& state);
	static void SET_5_C(State& state);
	static void SET_5_D(State& state);
	static void SET_5_E(State& state);
	static void SET_5_H(State& state);
	static void SET_5_L(State& state);
	static void SET_5_MEM_AT_HL(State& state);
	static void SET_5_A(State& state);
	static void SET_6_B(State& state);
	static void SET_6_C(State& state);
	static void SET_6_D(State& state);
	static void SET_6_E(State& state);
	static void SET_6_H(State& state);
	static void SET_6_L(State& state);
	static void SET_6_MEM_AT_HL(State& state);
	static void SET_6_A(State& state);
	static void SET_7_B(State& state);
	static void SET_7_C(State& state);
	static void SET_7_D(State& state);
	static void SET_7_E(State& state);
	static void SET_7_H(State& state);
	static void SET_7_L(State& state);
	static void SET_7_MEM_AT_HL(State& state);
	static void SET_7_A(State& state);
};


#endif //LIBGREBE_INSTRUCTIONS_HPP
